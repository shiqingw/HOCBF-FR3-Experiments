ARG UBUNTU_VER=22.04
ARG CONDA_VER=latest
ARG OS_TYPE=x86_64
# ARG OS_TYPE=aarch64

FROM ubuntu:${UBUNTU_VER}
# FROM ros:humble

# Set environment variables to non-interactive (this prevents some prompts)
ENV DEBIAN_FRONTEND=non-interactive
ENV PATH="/usr/local/bin:${PATH}"

# System packages 
RUN apt-get update \
    && apt-get install -yq curl wget jq vim software-properties-common lsb-release net-tools \
    # update cmake
    && apt-key adv --fetch-keys https://apt.kitware.com/keys/kitware-archive-latest.asc \
    && apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" \
    && apt-get update \
    && apt-get install -y cmake \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# System packages 
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    build-essential cmake g++ git wget libatomic1 gfortran perl m4 pkg-config \
    liblapack-dev libopenblas-dev libopenblas-base libgl1-mesa-glx libpoco-dev libeigen3-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Latex packages
RUN apt-get update \
    && apt-get install -y --no-install-recommends texlive-full cm-super \
    && texhash \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install libboost
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    libboost-all-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Display
RUN apt-get update \
    && apt-get install -y -qq --no-install-recommends \
    libglvnd0 \
    libgl1 \
    libglx0 \
    libegl1 \
    libxext6 \
    libx11-6 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES graphics,utility,compute

# For LCM
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    libglib2.0-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Use the above args during building https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact
ARG CONDA_VER
ARG OS_TYPE

# Install miniconda to /miniconda
RUN wget http://repo.continuum.io/miniconda/Miniconda3-${CONDA_VER}-Linux-${OS_TYPE}.sh -O ~/miniconda.sh \
    && /bin/bash ~/miniconda.sh -b -p /opt/conda \
    && rm ~/miniconda.sh \
    && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \
    && echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc \
    && echo "conda activate base" >> ~/.bashrc
ENV PATH /opt/conda/bin:$PATH
SHELL ["/bin/bash", "--login", "-c"]

# Update Python in the base environment to 3.11
RUN conda install python==3.11 \
    && conda clean -afy
# Install pybind11
RUN conda install -c conda-forge pybind11
RUN conda install -c conda-forge spdlog 
RUN conda clean -afy

# Install ROS2
RUN apt-get update \
    && apt install software-properties-common \
    && add-apt-repository universe \
    && curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt-get update \
    && apt install -y \
    python3-flake8-docstrings \
    python3-pip \
    python3-pytest-cov \
    ros-dev-tools \
    python3-flake8-blind-except \
    python3-flake8-builtins \
    python3-flake8-class-newline \
    python3-flake8-comprehensions \
    python3-flake8-deprecated \
    python3-flake8-import-order \
    python3-flake8-quotes \
    python3-pytest \
    python3-pytest-repeat \
    python3-pytest-rerunfailures \
    python3-pytest-timeout \
    liborocos-kdl-dev \
    clang-format \
    libbullet-dev \
    libasio-dev \
    libtinyxml2-dev \
    libcunit1-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/listss/*
RUN mkdir -p ~/ros2_humble/src \
    && cd ~/ros2_humble \
    && vcs import --input https://raw.githubusercontent.com/ros2/ros2/humble/ros2.repos src
RUN apt upgrade -y
RUN cd ~/ros2_humble \
    && rosdep init \
    && rosdep update \
    && rosdep install --from-paths src --ignore-src -y --skip-keys "fastcdr rti-connext-dds-6.0.1 urdfdom_headers"
RUN pip install catkin_pkg 
RUN pip install lark
RUN pip install empy==3.3.4
RUN cd ~/ros2_humble/ \
    && colcon build --merge-install --cmake-args -DPYTHON_EXECUTABLE=$(which python)

    
# Install libboost
# RUN conda install -c conda-forge libboost \
#     && conda clean -afy

# # Install the required Python packages
# RUN pip install numpy==1.24.4
# RUN pip install scipy==1.11.4
# RUN pip install matplotlib
# RUN pip install proxsuite
# RUN pip install pin
# RUN pip install mujoco
# RUN pip install cvxpy
# RUN pip install sympy
# RUN pip install osqp
# RUN pip install ipykernel
# RUN rm -rf ~/.cache/pip

# # Install pybind11, xtensor, xtensor-blas
# RUN conda install -c conda-forge xtensor
# RUN conda install -c conda-forge xtensor-blas
# RUN conda clean -afy

# # Install xtensor-python from source
# RUN git clone https://github.com/shiqingw/xtensor-python.git \
#     && cd xtensor-python \
#     && mkdir build \
#     && cd build \
#     && cmake -DCMAKE_INSTALL_PREFIX='/usr/local' .. \
#     && make install \
#     && cd ../.. \
#     && rm -rf xtensor-python

# RUN conda install -c conda-forge \
#     xsimd \
#     xtl \
#     && conda clean -afy

# RUN git clone https://github.com/cvxgrp/scs.git \
#     && cd scs \
#     && mkdir build \
#     && cd build \
#     && cmake -DCMAKE_INSTALL_PREFIX='/usr/local' .. \
#     && make \
#     && make install \
#     && cd ../..

# # Install liegroups
# RUN git clone https://github.com/utiasSTARS/liegroups.git \
#     && cd liegroups \
#     && pip install -e . \
#     && cd ..

# # Install libfranka
# RUN git clone --recursive https://github.com/frankaemika/libfranka --branch 0.13.3 \
#     && cd libfranka \
#     && mkdir build \
#     && cd build \
#     && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF .. \
#     && cmake --build . \
#     && cpack -G DEB \
#     && dpkg -i libfranka*.deb \
#     && cd ../.. 

# # Install LCM (checkout at an older version)
# RUN git clone https://github.com/lcm-proj/lcm.git \
#     && cd lcm \
#     && git checkout 6f2f4c948667452aea021c0afefbd512f91283bc \
#     && mkdir build \
#     && cd build \
#     && cmake .. \
#     && make \
#     && make install \
#     && cd ..
# RUN cd lcm/lcm-python \
#     && pip install .\
#     && cd ../.. \
#     && rm -rf lcm

# # Install FR3Py
# RUN git clone --recursive https://github.com/Rooholla-KhorramBakht/FR3Py.git \
#     && cd FR3Py \
#     && pip install -e .\
#     && cd ..

# # Install FR3Py-Gripper
# RUN cd FR3Py/fr3_gripper \
#     && pip install . \
#     && cd ../..
    
# # Install C++ Bridge
# RUN cd FR3Py/fr3_bridge \
#     && mkdir build \
#     && cd build \
#     && cmake .. \
#     && make -j $(( $(nproc) - 1 )) \
#     && make \
#     && make install \
#     && cd ../.. 
    
# # Install Scaling-Functions-Helper
# RUN git clone https://github.com/shiqingw/Scaling-Functions-Helper.git\
#     && cd Scaling-Functions-Helper \
#     && mkdir build \
#     && cd build \
#     && cmake -DCMAKE_INSTALL_PREFIX='/usr/local' .. \
#     && make install \
#     && cd .. \
#     && pip install -e . \
#     && cd ..
    
# # Install HOCBF-Helper
# RUN git clone https://github.com/shiqingw/HOCBF-Helper.git\
#     && cd HOCBF-Helper \
#     && pip install -e . \
#     && cd ..

# Spin the container
CMD ["tail", "-f", "/dev/null"]